scalar Datetime

type Message {
  id: Int!
  content: String!
  authorId: Int!
  datetime: Datetime!
}
type Person {
  id: Int!
  name: String!
  avatarSeed: Int!
}
type ChatStateUpdate {
  people: [Person!]!
  newMessages: [Message!]!
}

type Query {
  chatState(since: Datetime): ChatStateUpdate!

  # Check if user's browser is already logged in (using the HTTP Cookie mechanism).
  checkAuthSession: Person
}
type Mutation {
  # Log in if account exists. Otherwise, register and log in. The name is unique.
  logIn(name: String!, passwordHash: String!): Person!

  # Clear the HTTP Session Cookie. User no longer will be able to chat, becomes read-only.
  logOut: Boolean

  # Write on chat.
  addMessage(content: String): Int!
}
type Subscription {
  chatStateUpdated: ChatStateUpdate!

  ## TODO removed messages
}